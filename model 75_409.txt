Test size: 0.2

CatBoost Parameters:
"iterations": 137,
"learning_rate": 0.10095947308778701,
"depth": 7,
"l2_leaf_reg": 0.01124311885824868,
"loss_function": MultiClass,
"random_seed": 42,
"early_stopping_rounds": 3,
"cat_features": ['has_description', 'month', 'Central', 'East', 'is_others_job_title', 'job_title', 'feature_1'],

LightGBM Parameters:
"boosting_type": gbdt,
"class_weight": None,
"colsample_bytree": 0.9333584928887282,
"importance_type": split,
"learning_rate": 0.23332896051177257,
"max_depth": 12,
"min_child_samples": 20,
"min_child_weight": 0.001,
"min_split_gain": 0.0,
"n_estimators": 142,
"n_jobs": -1,
"num_leaves": 34,
"objective": multiclass,
"random_state": 81,
"reg_alpha": 0.0,
"reg_lambda": 1,
"subsample": 0.9720591168744056,
"subsample_for_bin": 200000,
"subsample_freq": 0,
"num_class": 3,
"boosting": gbdt,
"metric": None,
"verbose": -1,
"min_data_in_leaf": 6,

XGBoost Parameters:
"objective": multi:softprob,
"use_label_encoder": None,
"base_score": None,
"booster": None,
"callbacks": None,
"colsample_bylevel": None,
"colsample_bynode": None,
"colsample_bytree": None,
"early_stopping_rounds": None,
"enable_categorical": True,
"eval_metric": None,
"feature_types": None,
"gamma": 0.5853539394726006,
"gpu_id": None,
"grow_policy": None,
"importance_type": None,
"interaction_constraints": None,
"learning_rate": 0.0477891814540274,
"max_bin": 64,
"max_cat_threshold": None,
"max_cat_to_onehot": None,
"max_delta_step": None,
"max_depth": 9,
"max_leaves": 29,
"min_child_weight": None,
"missing": nan,
"monotone_constraints": None,
"n_estimators": 115,
"n_jobs": -1,
"num_parallel_tree": None,
"predictor": None,
"random_state": 42,
"reg_alpha": 0.02528098880367532,
"reg_lambda": 0.1353926778304821,
"sampling_method": None,
"scale_pos_weight": None,
"subsample": 0.9767586501638066,
"tree_method": hist,
"validate_parameters": None,
"verbosity": None,
"num_class": 3,

voting = VotingClassifier(
    estimators=[
        ('cat', catBoost),
        ('lgb', lightgbm),
        ('xgBoost', xgBoost)
    ],
    voting='soft',
    n_jobs=-1
).fit(X_train, y_train)
